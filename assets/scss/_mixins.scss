/* ===== MIXINS ===== */

// generic box-shadow
@mixin box-shadow($box-shadow) {
	-moz-box-shadow: $box-shadow;
	-webkit-box-shadow: $box-shadow;
	box-shadow: $box-shadow;
}

// generic transform
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
	@include transform(scale($scale));
} 
// translate
@mixin translate($x, $y) {
	@include transform(translate($x, $y));
}
// skew
@mixin skew($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin($origin) {
	moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}




@mixin transition($transition...) {
	-moz-transition: $transition;
	-o-transition: $transition;
	-webkit-transition: $transition;
	transition: $transition;
}
@mixin transition-property($property...) {
	-moz-transition-property: $property;
	-o-transition-property: $property;
	-webkit-transition-property: $property;
	transition-property: $property;
}
@mixin transition-duration($duration...) {
	-moz-transition-property: $duration;
	-o-transition-property: $duration;
	-webkit-transition-property: $duration;
	transition-property: $duration;
}
@mixin transition-timing-function($timing...) {
	-moz-transition-timing-function: $timing;
	-o-transition-timing-function: $timing;
	-webkit-transition-timing-function: $timing;
	transition-timing-function: $timing;
}
@mixin transition-delay($delay...) {
	-moz-transition-delay: $delay;
	-o-transition-delay: $delay;
	-webkit-transition-delay: $delay;
	transition-delay: $delay;
}

/* === USAGE: ===
@include transition(background-color 1s .5s, color 2s);
*/



@mixin transition-transform($transition, $preface:webkit moz ms o spec){
  @each $browser in $preface {
    @if( $browser == spec) {
      transition: transform $transition;
    } @else {
			-#{$browser}-transition: -#{$browser}-transform $transition;
    }
  }
}
/* === USAGE: ===
@include transition-transform(1s, .5s, 2s);
*/


@mixin multi-transition-transform($transform, $transitions, $preface:webkit moz ms o spec){
  @each $browser in $preface {
    @if($browser == spec) {
      transition: transform $transform, $transitions;
    } @else {
			-#{$browser}-transition:-#{$browser}-transform $transform, $transitions;
    }
  }
}
/* === USAGE: ===
@include multi-transition-transform(0.5s linear, (background 0.5s linear, opacity 0.55s ease));
*/


@mixin keyframe ($animation_name) {
	@-webkit-keyframes $animation_name {
		@content;
	}

	@-moz-keyframes $animation_name {
		@content;
	}

	@-o-keyframes $animation_name {
		@content;
	}

	@keyframes $animation_name {
		@content;
	}
}
/* === USAGE: ===
@include keyframe(fadeout) {
	0% { opacity: 1; }
	100% { opacity: 0; }
}
*/



/*
@mixin animation ($animation) {
	-webkit-animation $animation;
	-moz-animation: $animation;
	-o-animation: $animation;
	animation: $animation;
}
*/
@mixin animation($animation, $preface:webkit moz o spec){
  @each $browser in $preface {
    @if( $browser == spec) {
      animation: $animation;
    } @else {
			-#{$browser}-animation: -#{$browser}-#{$animation};
    }
  }
}
/* === USAGE: ===
@include animation(example 5s linear 2s infinite alternate);
*/
@mixin animation-name($name, $preface:webkit moz o spec){
  @each $browser in $preface {
    @if( $browser == spec) {
      animation-name: $name;
    } @else {
			-#{$browser}-animation-name: -#{$browser}-#{$name};
    }
  }
}
@mixin animation-duration($duration, $preface:webkit moz o spec){
  @each $browser in $preface {
    @if( $browser == spec) {
      animation-duration: $duration;
    } @else {
			-#{$browser}-animation-duration: $duration;
    }
  }
}
@mixin animation-timing-function($timing, $preface:webkit moz o spec){
  @each $browser in $preface {
    @if( $browser == spec) {
      animation-timing-function: $timing;
    } @else {
			-#{$browser}-animation-timing-function: $timing;
    }
  }
}
@mixin animation-iteration-count($iterations, $preface:webkit moz o spec){
  @each $browser in $preface {
    @if( $browser == spec) {
      animation-iteration-count: $iterations;
    } @else {
			-#{$browser}-animation-iteration-count: $iterations;
    }
  }
}



// Function for converting a px based font-size to rem.
@function calculateRem($size) {
  $remSize: $size / $font-size-base;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}



@function max-safe-int() {
	@return 16777271;
}

@function max-int() {
	@return 2147483647;
}
 